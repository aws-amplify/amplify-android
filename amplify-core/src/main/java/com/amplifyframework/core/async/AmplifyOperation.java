/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package com.amplifyframework.core.async;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import com.amplifyframework.core.Amplify;
import com.amplifyframework.core.category.CategoryType;
import com.amplifyframework.core.category.CategoryTypeable;
import com.amplifyframework.hub.HubPayloadFilter;
import com.amplifyframework.hub.HubFilters;
import com.amplifyframework.hub.HubListener;
import com.amplifyframework.hub.HubChannel;
import com.amplifyframework.hub.HubPayload;
import com.amplifyframework.hub.SubscriptionToken;

import java.util.UUID;

/**
 * An abstract representation of an Amplify unit of work. Subclasses may aggregate multiple work items
 * to fulfill a single "AmplifyOperation", such as an "extract text operation" which might include
 * uploading an image to cloud storage, processing it via a Predictions engine, and translating the results.
 *
 * AmplifyOperations are used by plugin developers to perform tasks on behalf of the calling app. They have a default
 * implementation of a `publish` method that sends a contextualized payload to the Hub.
 *
 * Pausable/resumable tasks that do not require Hub dispatching should use {@link AsyncOperation} instead.
 */
public abstract class AmplifyOperation
        <R extends AmplifyOperationRequest>
        implements AsyncOperation, CategoryTypeable, Resumable, Cancelable {

    /// Incoming parameters of the original request. The Request will be included as part of the
    /// events being emitted by this operation. The request gives context about the operation that
    /// emitted the events.
    private R request;

    /// The unique ID of the operation. In categories where operations are persisted for future
    // processing, this id can be used to identify previously-scheduled work for progress tracking
    // or other functions.
    private UUID operationId;

    /// All AmplifyOperations must be associated with an Amplify Category
    private CategoryType categoryType;

    /// Token used to unsubscribe the listener attached to the operation
    private SubscriptionToken subscriptionToken;

    @Override
    public CategoryType getCategoryType() {
        return categoryType;
    }

    /**
     * Constructor.
     *
     * @param categoryType specifies the category that created this operation
     * @param request request object encapsulates the parameters of the operation
     * @param eventListener listener that is attached to the operation. The listener
     *                      will be notified of the events generated by this operation
     */
    public AmplifyOperation(@NonNull final CategoryType categoryType,
                            @NonNull final R request,
                            @Nullable final EventListener eventListener) {
        this.categoryType = categoryType;
        this.request = request;
        this.operationId = UUID.randomUUID();
        if (eventListener != null) {
            this.subscriptionToken = subscribe(eventListener);
        }
    }

    /**
     * Subscribe the listener with the Hub System. The listener will be invoked
     * when an event is dispatched through the Hub.
     *
     * @param eventListener the listener attached to the operation.
     * @param <E> parameter type of the event generated
     * @return the token used as proof of the subscription. The token can be used
     *          with the {@link #unsubscribe()} method to unsubscribe the listener.
     */
    public <E> SubscriptionToken subscribe(@NonNull final EventListener<E> eventListener) {
        HubChannel channel = HubChannel.forCategoryType(categoryType);
        HubPayloadFilter filterByOperationId = HubFilters.hubPayloadFilter(this);
        HubListener hubListener = new HubListener() {
            @Override
            public void onEvent(@NonNull HubPayload payload) {
                if (payload.getEventData() != null) {
                    // TODO: check for type casting. What to do when there is an exception?
                    // How to avoid this situation?
                    Class<E> clazz = (Class<E>) payload.getEventData().getClass();
                    eventListener.onEvent(clazz.isInstance(payload.getEventData()) ? clazz.cast(payload.getEventData()) : null);
                }
            }
        };

        return Amplify.Hub.subscribe(channel, filterByOperationId, hubListener);
    }

    /**
     * Dispatches an event to the hub. Internally, creates an `AmplifyOperationContext` object
     * from the operation's `id`, and `request`
     *
     * @param eventName name of the event
     * @param event payload of the event
     */
    public <E> void publish(String eventName, @NonNull final E event) {
        HubChannel channel = HubChannel.forCategoryType(categoryType);
        HubPayload payload = new HubPayload(eventName, event);
        Amplify.Hub.publish(channel, payload);
    }

    public void unsubscribe() {
        if (this.subscriptionToken != null) {
            Amplify.Hub.unsubscribe(this.subscriptionToken);
        }
    }

    @Override
    public void pause() {

    }

    @Override
    public void resume() {

    }

    @Override
    public void cancel() {

    }

    @Override
    public void start() {

    }
}
