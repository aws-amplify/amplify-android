/*
 * Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package com.amplifyframework.auth.cognito

import org.junit.Assert.assertEquals
import org.junit.Assert.assertNotEquals
import org.junit.Before
import org.junit.Test
import java.math.BigInteger
import java.util.*

class SRPHelperTests {
    private val privateA =
        BigInteger("94888873839067801699209751157983097472803403862376149894257905482980326305014120708841327474383776867490835991544401757353458851423548817030650959502170715563858472246798478938383992111864121476343968857619081845813192981650869721264613451137943849106130597163041933275453881757176416122005373573809300830865")
    private val publicA =
        BigInteger("1119247428684033447172297868498620978317548857899229658946745312863026562691316150406346864106062669911158129314950857465603171803287021003588123791821185916072587217955369271623510429537325511556330542101784937789396400286752612835161153733887643393352205092471873357634666884374287926536256678748408041238597763888283110576133399460248593923373111126607380459681596474938721376515593329462662848506719165950175083044905231704580656419611364744204398179729110438190571587555259293013386065129631948135018942704689449322396102893662038656753404963362172320744861906962502978714276414136005783717219003759051099063571622681604212111791606638317907665827888299358579886000274997330740606430758361551878153579452183428496577734529102684413238959372501144449784518943588392083353494852746571573387376384018479198188793647241647937870071568599298960971135747561206421880864546707291574811962872976502777643906968756980611812218024")

    private val srpB = BigInteger(
        "e05d0716c6f6bf2b96e4b08354015be28024b4bc9a022c3c7553b86a5feffe8ee0ae87ae8ebb970b9457ed56ef0f5249fad4b99235912c2445a803ff9c9412cb39bd860bcca12868c8e813404435f3621a2fa033270f053e15b7d2ec0617e40cafff3fef4d5be716821b389e5338c45ac2d65b292a4739dec8d05ae7feaca6a46d56624c753b705bbc78071ef5c47152c46d7c79b52e4f1de3a15ed68923b0f8b08cd4d6b9d358282e219ccfff37ac143b9c7283b859187f57ca445129aeef0517c394a363ed83ca65b11a7ede22b96b7e0ff43dd5f58248dbf16c47fad319a23c15ed27c47c765841cb6474eda7a8d44a65c7242d9ff7afc6fc37d03b43c9c6279d88248120908c4ecdfb84a6e42344cf1a57f976ef036a1eb7a64067eff195855735d4010ca33831bded8b40b5e60a61f19900f928353203adacab71948ef3bcd3540bf926fee5578a00f039bb5c60d10e446a55c9d9620257e05418523afe02e1bc3f3f00c8a43841248094c8806d38f4207679170126f449a62006b42bf0",
        16
    )
    private val uExpected = BigInteger("55210528188551933294168660600273656944094602294020021251326310004904436019280")
    private val xExpected = BigInteger("35002972281322559225995282163712515452164094971035196098842264315967202596678")
    private val sExpected =
        BigInteger("5113454726320779867359868850890716106539698054507867919391256276927905361340000827593481928040271539307856917813983981328119863211408926358019152361918184861168634064175462805559437545942963660228802491345050944378623707934127872795109643319871955960310681224102118718085650001798380776277540927396773129267511710962462646069614970707854212870491304872350100525331715335278787893610263284221454581266247555784285259969440791601634690924023126212458644867412248295412962194664529869258140209570942703792777897180297316296907132738925685401376959632555674554281799531267625572984772625127773614748502262763414134692502821020930720590119157286499911718172558906253415242864266441908987285072273571926859391484145558735402070187856447573071910902870828323294427112712944127364458375474177995301422527382694628927791468656584404800777349167846663665895853369923363146959558317143032213436496073302424592796663351090753841872905806")
    private val keyExpected = "a0z8GrRyu6bvL/ABfYRAuw=="
    private val secretBlock =
        "5ZmS3XIpUD0zsSdbIfEuyp6Bh/Gj1/1PoxqfZQxR9NoG8w/tX2COvK/U/Y9N736doE8QOYGKsmYGMtrRrQ7frLmn2kjE9vBByMRqyD8pmLL3Z2p9OwaAdDzkMH8X/9YubQNlkLR2dtu6DrvDv9DC6o6sq6IOT3WITjpVaIgEJ660nZAcqCM4lsZQF+he1ZqhVmqcOnpQVwGelNF9YhSOhHPGFZ9HrGJcADxMdtSVMVr8x5HEmpatsA986HpDMbAmG15GEFo93h7iGH4hwl584I076DyvzKyIGpqhVlJeor/MqvdCEG3/61Bku1es+LVhNrx8zPsLbfDitdqqLavjxZAU+UNUlD+Mqr9Ng3JXNVB3eQ76TazE1lHPpMI5mpkLmsJ9XP2zOI7kN+1UokLLVp7tRHQKJeGbARfSJFJBKneYQOJujmr6CixnYCb7XAOk0jRFOMDbv4Lbh4J70iuixe16WFF9UqtBfUzZobbKTuI4kvLYH+F8b3WtFBvMI9PIRXWhRYuej7SAMu+BOPO35bnURelp5GLCJwOs+GbYkHDWjZGBMNg5DxbdvZXqE/16Rnigw9JGi9Q63brcnFB1jlYagUqbv2ihAm7R0HIib0CEvW7AqK1yxL+0rjkVAI68AYY7eCl2gXjfXNmKLzmGCmExRpWO5DEslDtBcuEpAPVAwYNKdARVVSsXP5HcLxa0YzqjbSmOoSESYIE/1KvmncYcHsctVgR/+wmZziXPYtUYc3mwPDdXxXTkAzro8aAEMTeuMwEdBOh1Vji0xFhhdY/P/m2dIDX1Hct2O+TUKXOM/X0XM+9p0kaheIHg117lG1DIZT7VeD4x2qQaNR95NR7SzkyoGDZKTDXxS9NwVP8ad8qi5hPUhe0JlFq/aqHyjtoIS4TGUgl1ZnGl7dO03KQtara72Ivf6RnGMVN1MCiQavgHHIecyReSdIurpopSVA0DRFKJYK0/HDxynj04OaeuW7oyO0kV2trX5ebxrdtaCuZofHAb/qqEFUnyac8EWMONA2xZkh8JmmOL9n/qTmD3y5zR45LexAnDxLInNHIbSpqh7Tikre7DpqVpwrtGmrHmW1QAEfP95m/YbAdJ/3iMfnB6SEoeK7aTAtRoLKlPFlJjU+bk2387mYOvvwhBEnb50xMM1BW9ZNItj18KIC5E0/e/ePKDGp1HCpX09wO+QFabTJuabxc2j1W3p42y/InyW27R+Yhnqh/hWSN48w+ASNMaJIiixWQbrIlX4zkPuEFKZGYnMY3fMROzRrsNfSf7qJzYQYVw0y4GErt5uOpsaeShEvdBLAw3iVQV/VmfF23p6DT0i80ML+xyQTAJ+aDf6Y7SFKXFeCkkylNL9aDldgQ2qrsEPVicL2WMDEyU56QJD8MqaBlo+0qvQWAxT2ruvngXo3kBRyoOrxjS9hcFuzNoCol5Cvu5grD8tkF+mwnvq2W3l4NKnx5YK5Fi9viEub6hU6fDpgSHIGD/8gXFXNpBTXHtd1XuhCfLZlg7so7/k64CQNGiWlVn2rE+1c3BbT9fNW7Kz9VgLvL7RimjQqIDcynDxvqw6mTpvgQHdHJYrPUOyuCWmY03TbzCUUIt25oBfPVA5IjfwcgXCLczT3CfETJGOi2w3O78uiup3VRxg4vvNFPnNolWlyxtekcxF46Ovlm+qLkVgwENDJTDUlbOjZ+/ekGtTev3PtdYjT+dqNm3rMGU"
    private val m1Expected = "QG7a57h+ndPBVasvx/OkmsJdy5uoMEVRshboEd4S+j8="

    private lateinit var helper: SRPHelper

    @Before
    fun setUp() {
        helper = SRPHelper("username", "Password123")
        helper.setAValues(privateA, publicA)
        helper.setUserPoolParams("username", "us-east-2_KO6fcefgd")
    }

    @Test
    fun testValidPublicA() {
        val testHelper = SRPHelper("", "")
        val bigA = BigInteger(testHelper.getPublicA(), 16)
        assertNotEquals(BigInteger.ZERO, testHelper.modN(bigA))
    }

    @Test
    fun testComputeU() {
        val uActual = helper.computeU(srpB)
        assertEquals(uExpected, uActual)
    }

    @Test
    fun testComputeX() {
        val salt = BigInteger("e7dc204cebbfda6b62b8493e932f7f4c", 16)
        val xActual = helper.computeX(salt)
        assertEquals(xExpected, xActual)
    }

    @Test
    fun testComputeS() {
        val sActual = helper.computeS(uExpected, xExpected, srpB)
        assertEquals(sExpected, sActual)
    }

    @Test
    fun testComputePAK() {
        val keyActual = helper.computePasswordAuthenticationKey(sExpected, uExpected)
        assertEquals(keyExpected, String(Base64.getEncoder().encode(keyActual)))
    }

    @Test
    fun testGenerateM1() {
        helper.dateString = "Wed Sep 29 06:40:48 UTC 2021"
        val m1Actual = helper.generateM1Signature(keyExpected.toByteArray(), secretBlock)
        assertEquals(m1Expected, String(Base64.getEncoder().encode(m1Actual)))
    }
}