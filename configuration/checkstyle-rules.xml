<?xml version="1.0"?>
<!--
   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License").
   You may not use this file except in compliance with the License.
   A copy of the License is located at

    http://aws.amazon.com/apache2.0

   or in the "license" file accompanying this file. This file is distributed
   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
   express or implied. See the License for the specific language governing
   permissions and limitations under the License.
-->

<!DOCTYPE module PUBLIC
    "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
    "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
    <property name="charset" value="UTF-8" />
    <property name="severity" value="error" />
    <property name="fileExtensions" value="java" />

    <!-- Check that source files have a license header. -->
    <module name="RegexpHeader">
        <property name="headerFile" value="configuration/java.header" />
    </module>

    <!-- Complain if files become too long by count of lines. -->
    <module name="FileLength" />
    <!--
        Lines should be short, for reading ergonomics. We believe
        Checkstyle's default of 80 is overly aggressive for Java,
        which is a syntactically verbose language. 120 is already
        way too long for ergonomics, but allows some wiggle room for
        special circumstances, such as where Java is overly verbose.
    -->
    <module name="LineLength">
        <property name="max" value="120" />
    </module>

    <!-- We don't use tab characters, here. -->
    <module name="FileTabCharacter" />

    <!--
        All source files end with a newline, by UNIX convention.
        See a discussion at https://unix.stackexchange.com/a/18789/192936 .
    -->
    <module name="NewlineAtEndOfFile" />

    <module name="TreeWalker">
        <!-- Disallows runs of consecutive empty lines. We allow at most 1.  -->
        <module name="EmptyLineSeparator">
            <!--
                 This is okay:
                 private Boolean one;
                 private Boolean two;
            -->
            <property name="allowNoEmptyLineBetweenFields" value="true" />

            <!--
                This is NOT okay:
                Statement a;


                Statement b;
            -->
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
        </module>

        <!-- Obscure rules about for (;;) type use-cases: no extra spaces. -->
        <module name="EmptyForInitializerPad" />
        <module name="EmptyForIteratorPad" />

        <!-- No spaces padding () when used for cast. -->
        <module name="TypecastParenPad" />

        <!-- Only a single space may be used as a whitespace separator.  -->
        <module name="SingleSpaceSeparator" />

        <!-- "Standard" rules about whitespace. -->
        <module name="GenericWhitespace" />
        <module name="MethodParamPad" />
        <module name="NoWhitespaceAfter" />
        <module name="NoWhitespaceBefore" />
        <module name="ParenPad" />
        <module name="WhitespaceAfter" />
        <module name="WhitespaceAround">
            <property name="ignoreEnhancedForColon" value="false" />
            <!--
                Utility class constructors should be private. This
                happens widely in the code base, and is the desirable
                default. These should also have empty construtors, which
                might as well be consisely written.
            -->
            <property name="allowEmptyConstructors" value="true" />
            <!--
                 false is already the default value for
                 WhitespaceAround.  This documents that we have this
                 rule, intentionally. Don't use an empty lambda.  Create
                 a subclass which expresses this semantically:
                 EmptyConsumer.create(), etc., instead of value -> {}.
            -->
            <property name="allowEmptyLambdas" value="false" />

            <!--
                Allows empty class bodies.  Useful for creating an
                anonymous inner class, such as when defining a TypeToken.
            -->
            <property name="allowEmptyTypes" value="true" />
        </module>

        <!-- Disallow methods from having too many parameters. -->
        <module name="ParameterNumber" />

        <!--
            If your method gets too long, you should refactor it into
            more legible pieces.
        -->
        <module name="MethodLength" />

        <!-- "Standard" rules regarding annotation positioning and syntax. -->
        <module name="AnnotationLocation" />
        <module name="AnnotationUseStyle" />

        <!-- Always use @Override with method inheritance. -->
        <module name="MissingOverride" />

        <!-- @deprecated and @Deprecated should come in pairs. -->
        <module name="MissingDeprecated" />

        <!-- Always require braces around code blocks. (No if (foo) bar();) -->
        <module name="NeedBraces">
            <property name="allowSingleLineStatement" value="false" />
        </module>

        <!-- Validate "standard" positioning of {} block characters -->
        <module name="LeftCurly" />
        <module name="RightCurly" />

        <!-- It's technically possible to nest blocks, but it's bad practice. -->
        <module name="AvoidNestedBlocks" />

        <!-- Things have reasonable and idiomatic names. -->
        <module name="ClassTypeParameterName" />
        <module name="ConstantName" />
        <module name="InterfaceTypeParameterName" />
        <module name="LocalVariableName" />
        <module name="MemberName" />
        <module name="MethodName" />
        <module name="MethodTypeParameterName" />
        <module name="PackageName" />
        <module name="ParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]{2,}$" />
        </module>
        <module name="CatchParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]{2,}$" />
        </module>
        <module name="StaticVariableName" />
        <module name="TypeName" />

        <!-- 400L not 400l, cause lower 'l' looks like a number '1'. -->
        <module name="UpperEll" />

        <!-- In Java, we should write String[] args, not String args[]. -->
        <module name="ArrayTypeStyle" />

        <!-- Standard indentation on all sources. -->
        <module name="Indentation" />

        <!-- Store @SuppressWarnings annotations for later evaluation -->
        <module name="SuppressWarningsHolder"  />

        <!-- Use a standard ordering of Java language modifiers. -->
        <module name="ModifierOrder" />
        <module name="RedundantModifier" />
    
        <!--
            Java imports are an important part of the documentation of the
            structure of a code base. They should help the reader understand
            how the code is composed, with only a quick visual inspection.
        -->
        <module name="AvoidStarImport" />
        <module name="AvoidStaticImport" />
        <module name="RedundantImport" />
        <module name="UnusedImports" />
        <module name="ImportOrder">
            <property name="groups" value="/^androidx?\./,com.amplifyframework,/(com|org|net)/,/^javax?\./"/>
            <property name="option" value="bottom" />
            <property name="separated" value="true" />
            <property name="sortStaticImportsAlphabetically" value="true" />
        </module>
    
        <!-- Miscellaneous / General code quality checks. -->
        <module name="StringLiteralEquality" />
        <module name="SimplifyBooleanReturn" />
        <module name="ParameterAssignment" />
        <module name="PackageDeclaration" />
        <module name="MultipleVariableDeclarations" />
        <module name="MissingSwitchDefault" />
        <module name="ModifiedControlVariable" />
        <module name="MagicNumber">
            <!--
                 Android Studio IDE generates a hashCode()
                 implementation that uses 31 to offset field values.
                 This appears magic to the tool, but there's history and
                 meaning behind the choice, which should be accepted as
                 an acceptable default.
            -->
            <property name="ignoreHashCodeMethod" value="true" />
        </module>
        <module name="FallThrough" />
        <module name="EqualsHashCode" />
        <module name="EqualsAvoidNull" />
        <module name="EmptyStatement" />
        <module name="DefaultComesLast" />
        <module name="DeclarationOrder" />

        <!-- Class design checks -->
        <module name="DesignForExtension" />
        <module name="FinalClass" />
        <module name="HideUtilityClassConstructor" />
        <module name="InnerTypeLast" />
        <module name="MutableException" />
        <module name="OneTopLevelClass" />
        <module name="VisibilityModifier" />

        <!-- @property Javadocs must be in a consistent order. -->
        <module name="AtclauseOrder" />
        <!--
            public and protected methods should include a Javadoc
            explaining how customer-exposed functionality ought to be
            used.
        -->
        <module name="JavadocMethod">
            <property name="scope" value="protected" />
            <property name="validateThrows" value="true" />
        </module>
        <!--
            Checks for missing Javadoc comments on public and protected class/interface definitions.
        -->
        <module name="MissingJavadocType">
            <property name="scope" value="protected" />
        </module>
        <module name="MissingJavadocMethod">
            <property name="scope" value="protected" />
            <!--
                 false is already the default value for this. This is
                 here to document the rationale for deliberately using
                 this configuration. Getter Javadocs usually degrade to
                 "Gets the foo." However, the getter is the one place a
                 user will actually interact with the property value. So
                 you should document the property and its purpose on the
                 getter, _in preference to_ other locations.
            -->
            <property name="allowMissingPropertyJavadoc" value="false" />
        </module>

        <!--
            public and protected class/interface definitions should
            include a high-level descriptive doc.
        -->
        <module name="JavadocType">
            <property name="scope" value="protected" />
        </module>
        <!--
            public and protected fields should include a high-level descriptive doc.
        -->
        <module name="JavadocVariable">
            <property name="scope" value="protected" />
        </module>

        <!-- disallow empty at-clauses. -->
        <module name="NonEmptyAtclauseDescription" />
        <!-- Javadocs contain a valid summary statement. -->
        <module name="SummaryJavadocCheck" />
        <!-- Prefer a single-line Javadoc, if it'll fit (e.g., no at-clauses) -->
        <module name="SingleLineJavadoc" />
        <!-- Common style checks for javadocs, when they do already exist. -->
        <module name="JavadocStyle">
            <property name="checkEmptyJavadoc" value="true" />
        </module>
    </module>

    <!-- Analyze stored @SuppressWarnings annotations. -->
    <module name="SuppressWarningsFilter" />

    <!-- Apply project-wide suppressions from checkstyle-suppressions.xml. -->
    <module name="SuppressionFilter">
        <property name="file" value="configuration/checkstyle-suppressions.xml"/>
        <property name="optional" value="false"/>
    </module>
</module>

