/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package com.amplifyframework.datastore;

import androidx.annotation.NonNull;

import com.amplifyframework.core.Action;
import com.amplifyframework.core.Consumer;
import com.amplifyframework.core.async.Cancelable;
import com.amplifyframework.core.model.Model;
import com.amplifyframework.core.model.ModelField;
import com.amplifyframework.core.model.query.QueryOptions;
import com.amplifyframework.core.model.query.predicate.QueryPredicate;

import java.util.Iterator;

/**
 * A DataStore is a high-level abstraction of an object repository.
 *
 * The DataStore can host items which extend {@link Model}, and that are dressed with various
 * annotations, e.g. {@link ModelField}. Model classes are auto-generated by the
 * Amplify Gradle Plugin.
 *
 * @see <a href="https://todo.link">Amplify Android Models and Annotations Documentation</a>
 */
public interface DataStoreCategoryBehavior {
    /**
     * Saves an item into the DataStore.
     * @param item An item to save
     * @param onItemSaved Called upon successful save of item
     * @param onFailureToSave Called upon failure to save item
     * @param <T> The time of item being saved
     */
    <T extends Model> void save(
            @NonNull T item,
            @NonNull Consumer<DataStoreItemChange<T>> onItemSaved,
            @NonNull Consumer<DataStoreException> onFailureToSave
    );

    /**
     * Saves an item into the DataStore if the data being overwritten meets
     * the provided conditions. This is useful for making sure that no data
     * is overwritten with an outdated/incorrect assumption.
     * @param item An item to save
     * @param predicate Predicate condition to apply for conditional write
     * @param onItemSaved Called upon successful save of item
     * @param onFailureToSave Called upon failure to save item
     * @param <T> The time of item being saved
     */
    <T extends Model> void save(
            @NonNull T item,
            @NonNull QueryPredicate predicate,
            @NonNull Consumer<DataStoreItemChange<T>> onItemSaved,
            @NonNull Consumer<DataStoreException> onFailureToSave
    );

    /**
     * Deletes an item from the DataStore.
     * @param item An item to delete from the DataStore
     * @param onItemDeleted Called upon successful deletion of item
     * @param onFailureToDelete Called upon failure to delete item
     * @param <T> The type of item being deleted
     */
    <T extends Model> void delete(
            @NonNull T item,
            @NonNull Consumer<DataStoreItemChange<T>> onItemDeleted,
            @NonNull Consumer<DataStoreException> onFailureToDelete
    );

    /**
     * Deletes an item from the DataStore if the data being deleted meets the
     * provided conditions. This is useful for making sure that no data is being
     * deleted with an outdated/incorrect assumption.
     * @param item An item to delete from the DataStore
     * @param predicate Predicate condition to apply for conditional write
     * @param onItemDeleted Called upon successful deletion of item
     * @param onFailureToDelete Called upon failure to delete item
     * @param <T> The type of item being deleted
     */
    <T extends Model> void delete(
            @NonNull T item,
            @NonNull QueryPredicate predicate,
            @NonNull Consumer<DataStoreItemChange<T>> onItemDeleted,
            @NonNull Consumer<DataStoreException> onFailureToDelete
    );

    /**
     * Query the DataStore to find all items of the requested Java class.
     * @param itemClass Items of this class will be targeted by this query
     * @param onQueryResults Called when a query successfully returns 0 or more results
     * @param onQueryFailure Called when a failure interrupts successful completion of a query
     * @param <T> The type of items being queried
     */
    <T extends Model> void query(
            @NonNull Class<T> itemClass,
            @NonNull Consumer<Iterator<T>> onQueryResults,
            @NonNull Consumer<DataStoreException> onQueryFailure
    );

    /**
     * Query the DataStore to find all items of the requested Java class that fulfills the
     * predicate.
     * @param itemClass Items of this class will be targeted by this query
     * @param predicate Predicate condition to apply to query
     * @param onQueryResults Called when a query successfully returns 0 or more results
     * @param onQueryFailure Called when a failure interrupts successful completion of a query
     * @param <T> The type of items being queried
     */
    <T extends Model> void query(
            @NonNull Class<T> itemClass,
            @NonNull QueryPredicate predicate,
            @NonNull Consumer<Iterator<T>> onQueryResults,
            @NonNull Consumer<DataStoreException> onQueryFailure
    );

    /**
     * Query the DataStore to find items of the requests Java class, using the provided
     * {@link QueryOptions}. The query options include support for filtering and paging.
     * @param itemClass Class of items that will be queried
     * @param options Filtering and paging options
     * @param onQueryResults Called when there are results available
     * @param onQueryFailure Called when there is a failure that prevents results from being rendered
     * @param <T> The type of items being queried
     */
    <T extends Model> void query(
            @NonNull Class<T> itemClass,
            @NonNull QueryOptions options,
            @NonNull Consumer<Iterator<T>> onQueryResults,
            @NonNull Consumer<DataStoreException> onQueryFailure
    );

    /**
     * Observe all changes to any/all item(s) in the DataStore.
     * @param onObservationStarted Called when observation begins
     * @param onDataStoreItemChange  Called 0..n times, once for each and every change that
     *                               occurs to any/all item(s) in the DataStore.
     * @param onObservationFailure   Called if observation of the DataStore terminates
     *                               with a non-recoverable failure
     * @param onObservationCompleted Called when observation completes gracefully
     */
    void observe(
            @NonNull Consumer<Cancelable> onObservationStarted,
            @NonNull Consumer<DataStoreItemChange<? extends Model>> onDataStoreItemChange,
            @NonNull Consumer<DataStoreException> onObservationFailure,
            @NonNull Action onObservationCompleted
    );

    /**
     * Observe changes to a certain type of item(s) in the DataStore.
     * @param itemClass The class of the item(s) to observe
     * @param <T> The type of the item(s) to observe
     * @param onObservationStarted Called when observation begins
     * @param onDataStoreItemChange Called 0..n times, whenever there is a change to an
     *                              item of the requested class
     * @param onObservationFailure Called if observation of the DataStore terminates
     *                             with a non-recoverable failure
     * @param onObservationCompleted Called when observation completes gracefully
     */
    <T extends Model> void observe(
            @NonNull Class<T> itemClass,
            @NonNull Consumer<Cancelable> onObservationStarted,
            @NonNull Consumer<DataStoreItemChange<T>> onDataStoreItemChange,
            @NonNull Consumer<DataStoreException> onObservationFailure,
            @NonNull Action onObservationCompleted
    );

    /**
     * Observe changes to a specific item, identified by its class and unique ID.
     * @param itemClass The class of the item being observed
     * @param uniqueId The unique ID of the item being observed
     * @param <T> The type of item being observed
     * @param onObservationStarted Called when observation begins
     * @param onDataStoreItemChange Called 0..n times, whenever there are changes to the
     *                              item which is uniquely identified by the provided
     *                              class and unique ID. Note that this callback will be invoked
     *                              many times for a single item, in the case where
     *                              the item is updated many times.
     * @param onObservationFailure Called if observation of the DataStore terminates
     *                             with a non-recoverable failure
     * @param onObservationCompleted Called when observation completes gracefully
     */
    <T extends Model> void observe(
            @NonNull Class<T> itemClass,
            @NonNull String uniqueId,
            @NonNull Consumer<Cancelable> onObservationStarted,
            @NonNull Consumer<DataStoreItemChange<T>> onDataStoreItemChange,
            @NonNull Consumer<DataStoreException> onObservationFailure,
            @NonNull Action onObservationCompleted
    );

    /**
     * Observe a collection of item(s) that have a specified class type, and that match
     * additional criteria, specified by a fluent chain of selection operators.
     * @param itemClass The class of item(s) to observe
     * @param selectionCriteria
     *        Additional criteria which will be considered when identifying which
     *        items in the DataStore should be observed for changes.
     * @param <T> The type of the item(s) to observe
     * @param onObservationStarted Called when observation begins
     * @param onDataStoreItemChange Called 0..n times, whenever there are changes to
     *                              models of the given class, that additionally match the provided
     *                              selection criteria
     * @param onObservationFailure Called if observation of the DataStore terminates
     *                             with a non-recoverable failure
     * @param onObservationCompleted Called when observation completes gracefully
     */
    <T extends Model> void observe(
            @NonNull Class<T> itemClass,
            @NonNull QueryPredicate selectionCriteria,
            @NonNull Consumer<Cancelable> onObservationStarted,
            @NonNull Consumer<DataStoreItemChange<T>> onDataStoreItemChange,
            @NonNull Consumer<DataStoreException> onObservationFailure,
            @NonNull Action onObservationCompleted
    );
}
