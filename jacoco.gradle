apply from: '../jacoco-config.gradle'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.7"
}

afterEvaluate { project ->
    def ignoreList = jacocoIgnoreList
    def projectName = project.name
    if (ignoreList.contains(projectName)) {
        println "Jacoco: ignoring project ${projectName}"
        return false
    }
    setupTestExistenceValidationTask()
    if (isAndroidModule(project)) {
        setupAndroidReporting(project)
    } else {
        setupKotlinReporting()
    }
}

def setupTestExistenceValidationTask() {
    task testExistenceValidation(type: TestExistenceValidation)
}

def setupAndroidReporting(Project currentProject) {
    tasks.withType(Test) {
        jacoco.includeNoLocationClasses true
    }
    task jacocoTestReport(
            type: JacocoReport,
            dependsOn: [
                    'testExistenceValidation',
                    'testDebugUnitTest'
            ]
    ) {
        reports {
            csv.enabled false
            xml {
                enabled true
                destination file("${buildDir}/coverage-report/${currentProject.name}.xml")
            }
            html {
                enabled true
                destination file("${buildDir}/coverage-report/${currentProject.name}.html")
            }
        }

        final def coverageSourceDirs = [
                "$projectDir/src/main/java",
                "$projectDir/src/main/kotlin"
        ]
        final def kotlinDebugTree = fileTree(
                dir: "$buildDir/tmp/kotlin-classes/debug",
                excludes: jacocoFileFilter
        )

        final def javaDebugTree = fileTree(
                dir: "$buildDir/intermediates/javac/debug/classes",
                excludes: jacocoFileFilter
        )
        sourceDirectories.from = files(coverageSourceDirs)
        classDirectories.from = files([kotlinDebugTree, javaDebugTree])
        executionData.from = fileTree(
                dir: project.buildDir,
                includes: ['jacoco/testDebugUnitTest.exec']
        )
    }
}

def setupKotlinReporting() {
    jacocoTestReport {
        dependsOn testExistenceValidation
        dependsOn test
        reports {
            csv.enabled false
            xml {
                enabled true
                destination file("${buildDir}/coverage-report/${currentProject.name}.xml")
            }
            html.enabled false
        }
    }
}

private static boolean isAndroidModule(Project project) {
    def isAndroidLibrary = project.plugins.hasPlugin('com.android.library')
    def isAndroidApp = project.plugins.hasPlugin('com.android.application')
    return isAndroidLibrary || isAndroidApp
}

class TestExistenceValidation extends DefaultTask {

    static final SRC_DIR = 'src'
    static final JAVA_DIR = 'java'
    static final TEST_DIRS = ['test', 'androidTest']

    static final IGNORED_NAME_PATTERNS = [
            ~/^sample-.++$/
    ]

    @TaskAction
    void execute() {
        if (shouldSkip(project)) return

        File srcDir = new File(project.projectDir, SRC_DIR)
        FileFilter filter = { it.isDirectory() }
        File[] subDirs = srcDir.listFiles(filter) ?: []
        File testsDir = subDirs.find { TEST_DIRS.contains(it.name) }
        if (testsDir) {
            File javaTestsDir = testsDir
                    .listFiles(filter)
                    .find { it.name == JAVA_DIR }
            if (javaTestsDir && javaTestsDir.list().length > 0) {
                return
            }
        }

        throw new GradleException(
                "${project.name} has no unit tests. "
        )
    }

    private static boolean shouldSkip(Project project) {
        def name = project.name
        return IGNORED_NAME_PATTERNS
                .collect { name =~ it } // convert Pattern to Matcher
                .any { it.find() }
    }
}