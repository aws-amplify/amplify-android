RELEASE_TAG_PREFIX = 'release_v'
default_platform(:android)

platform :android do |options|
  gradle_properties_path = File.expand_path("#{Dir.pwd()}/../../gradle.properties")
  gradle_project_root = File.dirname(gradle_properties_path)
  change_log_path = "#{gradle_project_root}/CHANGELOG.md"
  version_regex = /(\d*)\.(\d*)\.(\d*)(?:-unstable\.)?(\d*)?/

  desc "Fetch all tags to ensure accurate calculation of the next release number."
  before_all do 
    sh('git', 'fetch', '--tags')
    sh('git', 'fetch')
  end

  lane :manage_next_release_pr do 
    last_release_tag = last_git_tag(pattern: "#{RELEASE_TAG_PREFIX}*")
    next_version, commits = calculate_next_release_version(release_tag_prefix: RELEASE_TAG_PREFIX, from_tag: last_release_tag)
    UI.message("Version change #{last_release_tag} => #{next_version}")
    update_gradle_properties(version: next_version)
    update_change_log(last_release_tag: last_release_tag)

    git_add(path: [gradle_properties_path, change_log_path])
  end


  desc "Checks out a tag and runs the uploadArchives gradle task."
  lane :push_tag_to_maven do |options|
    UI.message("Pushing release #{options[:release_tag]} to maven")
    sh("git", "checkout", options[:release_tag])
    publish_to_maven
  end

  desc "Update changelog"
  private_lane :update_change_log do |options|
    changelog_body = changelog_from_git_commits(
      between: [options[:last_release_tag], "HEAD"],
      merge_commit_filtering: "exclude_merges",
      pretty: "- %s"
    )

    open(change_log_path, 'a') { |f|
      f.puts "# Release Amplify Android #{options[:next_version]}\n\n"
      f.puts "#{changelog_body}\n\n"
    }
  end

  desc "Increment versions"
  private_lane :update_gradle_properties do |options|
    version = options[:version].to_s
    segments = version.match(version_regex).captures # version.split('.')
    prerelease = segments.length() > 3 ?  0 : segments[-1].to_i

    # Derive the version code from version segements and pre-release number (if applicable)
    version_code = segments[0].to_i * 100000 + segments[1].to_i * 1000 + segments[2].to_i * 10 + prerelease

    UI.message("Updating versionName and versionCode in gradle.properties")

    set_key_value(file: gradle_properties_path, key: 'VERSION_NAME', value: version)
    set_key_value(file: gradle_properties_path, key: 'VERSION_CODE', value: version_code.to_s)

  end

  desc "Create the release commit."
  private_lane :release_commit do |options|
    next_version = options[:version]
    commit_message = "chore: release #{next_version} [skip ci]"
    sh('git', 'commit', '-am', commit_message)
  end

  desc "Tag in git and push to GitHub"
  private_lane :add_tag do |options|
    next_version = options[:version]

    add_git_tag(tag: next_version)
    push_git_tags(tag: next_version)
  end

  desc "Publish release to maven using attributes from environment variables."
  private_lane :publish_to_maven do |options|
    gradle(
      project_dir: gradle_project_root,
      task: "uploadArchives",
      print_command: false,
      flags: '--stacktrace',
      properties: {
        "SONATYPE_NEXUS_USERNAME": ConfigValueReader.from_environment_variable('SONATYPE_NEXUS_USERNAME'),
        "SONATYPE_NEXUS_PASSWORD": ConfigValueReader.from_environment_variable('SONATYPE_NEXUS_PASSWORD'),
        "signing.inMemoryKey": ConfigValueReader.from_environment_variable('signing.inMemoryKey'),
        "signing.password": ConfigValueReader.from_environment_variable('signing.password'),
        "signing.keyId": ConfigValueReader.from_environment_variable('signing.keyId'),
        "signing.secretKeyRingFile": ConfigValueReader.from_environment_variable('signing.secretKeyRingFile')
      }
    )
  end

  desc "Publish release to maven without overriding gradle properties."
  private_lane :publish_to_maven_no_overrides do |options|
    gradle(
      project_dir: gradle_project_root,
      task: "uploadArchives",
      print_command: false,
      flags: '--stacktrace'
    )
  end

  desc "Retrieve a parameter value from SSM."
  private_lane :get_param_value do |options|
    sh(
      command: "aws ssm get-parameter --name #{options[:param_name]} --with-decryption --region us-east-1 --query Parameter.Value --output text",
      log: false
    )
  end

  desc "Cleanup all the build artifacts"
  private_lane :cleanup do |options|
    gradle(
      project_dir: gradle_project_root,
      task: "clean"
    )
  end
end

module ConfigValueReader
  def self.from_environment_variable(param_name)
    ENV[param_name.gsub('.','_')]
  end

  def self.from_ssm(param_name)
    result = `aws ssm get-parameter --name #{param_name} --with-decryption --region us-east-1 --query Parameter.Value --output text`
    if $?.exitstatus != 0
      raise "Failed to get value for parameter #{param_name}"
    end
    result
  end
end
