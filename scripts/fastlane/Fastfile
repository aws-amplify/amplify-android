RELEASE_TAG_PREFIX = 'release_v'
default_platform(:android)

platform :android do |options|
  gradle_properties_path = File.expand_path("#{Dir.pwd()}/../../gradle.properties")
  gradle_project_root = File.dirname(gradle_properties_path)
  change_log_path = "#{gradle_project_root}/CHANGELOG.md"
  version_regex = /(\d*)\.(\d*)\.(\d*)(?:-unstable\.)?(\d*)?/
  pr_body = %Q(
## Release PR review checklist
- [ ] Verify version name in gradle.properties
- [ ] Verify CHANGELOG.md
)

  desc "Fetch all tags to ensure accurate calculation of the next release number."
  before_all do 
    sh('git', 'fetch', '--tags')
    sh('git', 'fetch')
  end

  lane :configure_git_options do |options|
    sh('git', 'config', 'user.email', options[:git_user_email])
    sh('git', 'config', 'user.name', options[:git_user_name])
  end

  lane :create_next_release_pr do |options|
    product_name = options[:product_name]
    last_release_tag = last_git_tag(pattern: "#{RELEASE_TAG_PREFIX}*")
    next_version, commits = calculate_next_release_version(release_tag_prefix: RELEASE_TAG_PREFIX, from_tag: last_release_tag)
    UI.message("Version change #{last_release_tag} => #{next_version}")
    update_gradle_properties(version: next_version)
    releases = { 
      feat: "minor",
      fix: "patch", 
      chore: "patch",
      refactor: "patch",
      perf: "patch",
      test: "patch",
      docs: "patch",
      no_type: "patch"
    }

    # The analyze_commits function is a pre-requisite to running conventional_changelog. However, the versioning logic
    # used by analyze_commits increments the version number once for each commit that's part of the release. As a result,
    # you end up "wasting" version numbers. For example, your last release is 1.1.2 and you have 5 bug fixes to go in the
    # next release, the version calculated by analyze_commit would be 1.1.7. We'll just use the version number we
    # get from calculate_next_release_version. We'll use semantic_release for generating the change log since it has
    # a richer feature set.
    isReleasable = analyze_commits(match: "#{last_release_tag}", codepush_friendly:[], releases: releases)
    update_change_log(next_version: next_version, last_release_tag: last_release_tag, commit_format: 'default', debug: true)

    git_add(path: [gradle_properties_path, change_log_path])
    git_commit(path: [gradle_properties_path, change_log_path], message: "chore(release): #{product_name} - #{next_version}")
    push_to_git_remote(force: true)


    current_branch = sh('git', 'branch', '--show-current')
    repo_name_parts = options[:repo].split('/')
    create_pull_request(base: 'main', 
                        title: "chore(release): #{product_name} - #{next_version}", 
                        body:pr_body, 
                        repo: options[:repo], 
                        api_token: ENV["RELEASE_MANAGER_TOKEN"])
  end

  desc "Update changelog"
  private_lane :update_change_log do |options|
    # We won't display the title generated by conventional_changelog because it will have the 
    # incorrect version.
    changelog_body = notes = conventional_changelog(display_title: false)

    open(change_log_path, 'a') { |f|
      f.puts "# Release #{options[:next_version]}\n\n"
      f.puts "#{changelog_body}\n\n"
    }
  end

  desc "Increment versions"
  private_lane :update_gradle_properties do |options|
    version = options[:version].to_s
    segments = version.match(version_regex).captures # version.split('.')

    UI.message("Updating versionName in gradle.properties")

    set_key_value(file: gradle_properties_path, key: 'VERSION_NAME', value: version)

  end


  desc "Create the release commit."
  private_lane :release_commit do |options|
    next_version = options[:version]
    commit_message = "chore: release #{next_version} [skip ci]"
    sh('git', 'commit', '-am', commit_message)
  end

  desc "Publish release to maven using attributes from environment variables."
  private_lane :publish_to_maven do |options|
    gradle(
      project_dir: gradle_project_root,
      task: "uploadArchives",
      print_command: false,
      flags: '--stacktrace',
      properties: {
        "SONATYPE_NEXUS_USERNAME": ConfigValueReader.from_environment_variable('SONATYPE_NEXUS_USERNAME'),
        "SONATYPE_NEXUS_PASSWORD": ConfigValueReader.from_environment_variable('SONATYPE_NEXUS_PASSWORD'),
        "signing.inMemoryKey": ConfigValueReader.from_environment_variable('signing.inMemoryKey'),
        "signing.password": ConfigValueReader.from_environment_variable('signing.password'),
        "signing.keyId": ConfigValueReader.from_environment_variable('signing.keyId'),
        "signing.secretKeyRingFile": ConfigValueReader.from_environment_variable('signing.secretKeyRingFile')
      }
    )
  end
end

module ConfigValueReader
  def self.from_environment_variable(param_name)
    ENV[param_name.gsub('.','_')]
  end

  def self.from_ssm(param_name)
    result = `aws ssm get-parameter --name #{param_name} --with-decryption --region us-east-1 --query Parameter.Value --output text`
    if $?.exitstatus != 0
      raise "Failed to get value for parameter #{param_name}"
    end
    result
  end
end
